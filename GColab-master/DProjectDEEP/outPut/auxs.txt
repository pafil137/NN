N = 100
r0 = 0.6
x = 0.9 * np.random.rand(N)
y = 0.9 * np.random.rand(N)
area = (20 * np.random.rand(N))**2  # 0 to 10 point radii
c = np.sqrt(area)
r = np.sqrt(x * x + y * y)
area1 = np.ma.masked_where(r < r0, area)
area2 = np.ma.masked_where(r >= r0, area)
plt.scatter(x, y, s=area1, marker='^', c=c)
plt.scatter(x, y, s=area2, marker='o', c=c)
# Show the boundary between the regions:
theta = np.arange(0, np.pi / 2, 0.01)
plt.plot(r0 * np.cos(theta), r0 * np.sin(theta))

plt.show()

N = 5
menMeans = (20, 35, 30, 35, 27)
womenMeans = (25, 32, 34, 20, 25)
menStd = (2, 3, 4, 1, 2)
womenStd = (3, 5, 2, 3, 3)
ind = np.arange(N)    # the x locations for the groups
width = 0.35       # the width of the bars: can also be len(x) sequence

p1 = plt.bar(ind, menMeans, width, yerr=menStd)
p2 = plt.bar(ind, womenMeans, width,
             bottom=menMeans, yerr=womenStd)

plt.ylabel('Scores')
plt.title('Scores by group and gender')
plt.xticks(ind, ('G1', 'G2', 'G3', 'G4', 'G5'))
plt.yticks(np.arange(0, 81, 10))
plt.legend((p1[0], p2[0]), ('Men', 'Women'))

plt.show()


#inconcistencia matematica quando R=2500/(Enh=negativo)
                            prs = ps*math.pow(c6,Nb)
                            EC = 0
                            
                            for k in range(7):
                                EC += k*(prs)*math.pow(1- prs,k-1)
                                print(prs)
                                
                            E1hop = numeradorEnh*EC 
                                
                            Enh= E1hop*h #%J/bit
                            Enh_dbm = 10*math.log10(Enh/0.001) #%dBmJ/bit
                        


def plotGraph():
    
legend = ['saltos', 'Masked if > 0.5', 'Masked if < -0.5']
    
    lines = range(3)
    
    x = np.arange(0, 2*np.pi, 0.02)
    y = np.sin(x)
    y1 = np.sin(2*x)
    y2 = np.sin(3*x)
    ym1 = np.ma.masked_where(y1 > 0.5, y1)
    ym2 = np.ma.masked_where(y2 < -0.5, y2)
    
    lines[0] = plt.plot(x, y)
    lines[1] = plt.plot(x, ym1)
    lines[2] = plt.plot(x, ym2)
    
    print(lines)
    
    plt.setp(lines[0], linewidth=4)
    plt.setp(lines[1], linewidth=2)
    plt.setp(lines[2], markersize=10)
    
    plt.legend(legend,
               loc='upper right')
    
    plt.title('Energia  media  por  bit  em  funcao  do  tamanho  do  pacote  (Nb)\n  com taxa  de  transmissao R={0}  1Mbps e a={1}'.format(0,1))
    plt.ylabel('Eihop - dBmJ/bit')
    plt.xlabel('R - Nb(bits)')
    plt.show()

	#R
	[5.224483397918915, 1.5094935334677426, 0.6188104183445146, 0.5078920640981036, 0.49648571328335966]
[8.576147600602566, 0.938171692536371, -3.533571266693829, -4.80417870799651, -4.977292378878899]
[14.042497645785891, 4.705535863556608, -3.3471467923316593, -8.483993402854717, -10.142644084492394]
[20.043822999865416, 10.216869662278468, 0.7733998872694423, -7.428830313632748, -12.385539026108944]
	
	Nb
	[-14.824759694558946]
[-13.659545112660192]
[-11.466853876173309]
[-7.80431352842786]
	
	
	
	
	
	
	
	
	
	
	
	
	
	plt.figure(1)                # the first figure
    plt.subplot(211)             # the first subplot in the first figure
    plt.plot([1, 2, 3])
    plt.subplot(212)             # the second subplot in the first figure
    plt.plot([4, 5, 6])
    
    
    plt.figure(2)                # a second figure
    plt.plot([4, 5, 6])          # creates a subplot(111) by default
    
    plt.figure(1)                # figure 1 current; subplot(212) still current
    plt.subplot(211)             # make subplot(211) in figure1 current
    plt.title('Easy as 1, 2, 3') # subplot 211 title
    